This is main folder, once testing is done here then only code will be copied in github/SCM, to push on Git

npx tailwindcss -i  ./src/main/resources/static/css/input.css -o src/main/resources/static/css/output.css --watch

#Navbar - to optimise and rearrange navbar for medium and small screens, add more layers as for medium and small screen, scm logo will be on top and icons will be below that

#Entities :


#sign up:
    add code to check password matching,
    name = first name + last name --> add logic.
    add view password feature

#OAuth client id and password for googleusercontent
    Client ID - 1031314354704-6ccj26qg09mq7pfe2soh42p78q74dl6o.apps.googleusercontent.com
    Client secret - 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
    
#How to generate client ID
Step 1: Set up a project in Google Cloud Console
    Go to the Google Cloud Console.
    Log in with your Google account.
    Click on the "Select a Project" dropdown and then "New Project".
    Give your project a name (e.g., Localhost App).
    Choose your organization or leave it as No organization.
    Click "Create".
Step 2: Enable the OAuth 2.0 APIs
    In the Cloud Console, navigate to APIs & Services > Library.
    Search for and enable the following APIs:
    Google People API (for accessing user profiles).
    Any other APIs you plan to use (e.g., Gmail API, Calendar API, etc.).
Step 3: Configure OAuth consent screen
    Go to APIs & Services > OAuth consent screen.
    Select "External" if the application will be used by other accounts (non-Google Workspace users).
    Fill in the required details:
    App Name: A name visible to users (e.g., Localhost App).
    User Support Email: Your email address.
    Developer Contact Information: Your email address.
    Save the information.
Step 4: Create OAuth 2.0 Client ID
    Go to APIs & Services > Credentials.
    Click "Create Credentials" > "OAuth 2.0 Client ID".
    Select Application Type: Web Application.
    Fill in the required details:
    Name: (e.g., Localhost OAuth Client).
    Authorized redirect URIs: Add the following:
    bash
    Copy code
    http://localhost:8081/{redirection_page_link}
    Click "Create".
Step 5: Get the Client ID and Secret
    After creation, a popup will display your Client ID and Client Secret.
    Save these credentials for use in your application.
    Alternatively, download the credentials as a .json file for easy integration.
Step 6: Test with Localhost
    Use the Client ID and Client Secret in your app.
    When testing on localhost:8081, make sure your app uses one of the redirect URIs configured in Step 4.

cloudenary-->
API Key -->  443485695581873
secret --> Jq7uXkP8pIw3F_k_hfwjmhCurF0
cloud name --> drrmxigwq
API env variable --> CLOUDINARY_URL=cloudinary://<your_api_key>:<your_api_secret>@drrmxigwq